Description: fixing spelling errors
Author: Pierre Gruet <pgt@debian.org>
Forwarded: sgothel@jausoft.com
Last-Update: 2023-04-17

--- a/src/jogl/classes/com/jogamp/graph/curve/opengl/RenderState.java
+++ b/src/jogl/classes/com/jogamp/graph/curve/opengl/RenderState.java
@@ -265,7 +265,7 @@
      * @param updateLocation
      * @param data
      * @param throwOnError TODO
-     * @return true if no error occured, i.e. all locations found, otherwise false.
+     * @return true if no error occurred, i.e. all locations found, otherwise false.
      */
     public final boolean updateUniformLoc(final GL2ES2 gl, final boolean updateLocation, final GLUniformData data, final boolean throwOnError) {
         if( updateLocation || 0 > data.getLocation() ) {
@@ -287,7 +287,7 @@
      * @param updateData TODO
      * @param data
      * @param throwOnError TODO
-     * @return true if no error occured, i.e. all locations found, otherwise false.
+     * @return true if no error occurred, i.e. all locations found, otherwise false.
      */
     public final boolean updateUniformDataLoc(final GL2ES2 gl, boolean updateLocation, boolean updateData, final GLUniformData data, final boolean throwOnError) {
         updateLocation = updateLocation || 0 > data.getLocation();
@@ -310,7 +310,7 @@
      * @param gl
      * @param data
      * @param throwOnError TODO
-     * @return true if no error occured, i.e. all locations found, otherwise false.
+     * @return true if no error occurred, i.e. all locations found, otherwise false.
      */
     public final boolean updateAttributeLoc(final GL2ES2 gl, final boolean updateLocation, final GLArrayDataWrapper data, final boolean throwOnError) {
         if( updateLocation || 0 > data.getLocation() ) {
--- a/src/jogl/classes/com/jogamp/opengl/util/av/GLMediaPlayer.java
+++ b/src/jogl/classes/com/jogamp/opengl/util/av/GLMediaPlayer.java
@@ -466,7 +466,7 @@
     public void playStream(Uri streamLoc, int vid, int aid, int textureCount) throws IllegalStateException, IllegalArgumentException;
 
     /**
-     * Returns the {@link StreamException} caught in the decoder thread, or <code>null</code> if none occured.
+     * Returns the {@link StreamException} caught in the decoder thread, or <code>null</code> if none occurred.
      * <p>
      * Method clears the cached {@link StreamException}, hence an immediate subsequent call will return <code>null</code>.
      * </p>
--- a/src/newt/classes/jogamp/newt/DefaultEDTUtil.java
+++ b/src/newt/classes/jogamp/newt/DefaultEDTUtil.java
@@ -378,7 +378,7 @@
                         }
                         if(!task.hasWaiter() && null != task.getThrowable()) {
                             // at least dump stack-trace in case nobody waits for result
-                            System.err.println("DefaultEDT.run(): Caught exception occured on thread "+java.lang.Thread.currentThread().getName()+": "+task.toString());
+                            System.err.println("DefaultEDT.run(): Caught exception occurred on thread "+java.lang.Thread.currentThread().getName()+": "+task.toString());
                             task.getThrowable().printStackTrace();
                         }
                     }
--- a/src/newt/classes/jogamp/newt/WindowImpl.java
+++ b/src/newt/classes/jogamp/newt/WindowImpl.java
@@ -2976,7 +2976,7 @@
      * @param sendEvent true to send a resize event
      * @param defer to defer a resize event
      * @param newPixelScale the new pixel scale
-     * @return true if a pixel scale change occured, otherwise false.
+     * @return true if a pixel scale change occurred, otherwise false.
      */
     protected boolean applySoftPixelScale(final int[] move_diff, final boolean sendEvent, final boolean defer, final float[] newPixelScale) {
         boolean res = false;
--- a/src/newt/native/X11Display.c
+++ b/src/newt/native/X11Display.c
@@ -338,7 +338,7 @@
 
     (*env)->CallVoidMethod(env, obj, displayCompletedID, javaObjectAtom, windowDeleteAtom /*, kbdHandle*/, // XKB disabled for now
                                      randr_event_base, randr_error_base, xi_opcode);
-    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.CompleteDisplay0: Exception occured at displayCompleted(..)");
+    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.CompleteDisplay0: Exception occurred at displayCompleted(..)");
 }
 
 /*
@@ -448,7 +448,7 @@
     (*env)->CallVoidMethod(env, jw->jwindow, sendTouchScreenEventID,
             (jshort)eventType, (jint)modifiers, (jint)actionIdx,
             jNames, jX, jY, jPressure, (jfloat)1.0f);
-    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: XI: Exception occured at sendTouchScreenEvent(..)");
+    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: XI: Exception occurred at sendTouchScreenEvent(..)");
 }
 
 /*
@@ -509,7 +509,7 @@
         if( randr_event_base > 0 && RRScreenChangeNotify == ( evt.type - randr_event_base ) ) {
             DBG_PRINT( "X11: DispatchMessages dpy %p, Event RRScreenChangeNotify %p\n", (void*)dpy, (void*)&evt);
             (*env)->CallVoidMethod(env, obj, sendRRScreenChangeNotifyID, (jlong)(intptr_t)&evt);
-            NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: RR: Exception occured at sendRRScreenChangeNotify(..)");
+            NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: RR: Exception occurred at sendRRScreenChangeNotify(..)");
             continue; // next event
         }
 
@@ -689,19 +689,19 @@
                 (*env)->CallVoidMethod(env, jw->jwindow, sendMouseEventRequestFocusID, (jshort) EVENT_MOUSE_PRESSED, 
                                       modifiers,
                                       (jint) evt.xbutton.x, (jint) evt.xbutton.y, (jshort) evt.xbutton.button, 0.0f /*rotation*/);
-                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ButtonPress: Exception occured at sendMouseEventRequestFocus(..)");
+                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ButtonPress: Exception occurred at sendMouseEventRequestFocus(..)");
                 break;
             case ButtonRelease:
                 (*env)->CallVoidMethod(env, jw->jwindow, sendMouseEventID, (jshort) EVENT_MOUSE_RELEASED, 
                                       modifiers,
                                       (jint) evt.xbutton.x, (jint) evt.xbutton.y, (jshort) evt.xbutton.button, 0.0f /*rotation*/);
-                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ButtonRelease: Exception occured at sendMouseEvent(..)");
+                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ButtonRelease: Exception occurred at sendMouseEvent(..)");
                 break;
             case MotionNotify:
                 (*env)->CallVoidMethod(env, jw->jwindow, sendMouseEventID, (jshort) EVENT_MOUSE_MOVED, 
                                       modifiers,
                                       (jint) evt.xmotion.x, (jint) evt.xmotion.y, (jshort) 0, 0.0f /*rotation*/); 
-                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: MotionNotify: Exception occured at sendMouseEvent(..)");
+                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: MotionNotify: Exception occurred at sendMouseEvent(..)");
                 break;
             case EnterNotify:
                 DBG_PRINT( "X11: event . EnterNotify call %p %d/%d\n", (void*)evt.xcrossing.window, evt.xcrossing.x, evt.xcrossing.y);
@@ -711,7 +711,7 @@
                     (*env)->CallVoidMethod(env, jw->jwindow, visibleChangedSendMouseEventID, JNI_FALSE, (jint)visibleChange, 
                                       (jshort) EVENT_MOUSE_ENTERED, modifiers,
                                       (jint) evt.xcrossing.x, (jint) evt.xcrossing.y, (jshort) 0, 0.0f /*rotation*/);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: EnterNotify: Exception occured at visibleChangedSendMouseEvent(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: EnterNotify: Exception occurred at visibleChangedSendMouseEvent(..)");
                 }
                 break;
             case LeaveNotify:
@@ -722,7 +722,7 @@
                     (*env)->CallVoidMethod(env, jw->jwindow, visibleChangedSendMouseEventID, JNI_FALSE, (jint)visibleChange, 
                                       (jshort) EVENT_MOUSE_EXITED, modifiers,
                                       (jint) evt.xcrossing.x, (jint) evt.xcrossing.y, (jshort) 0, 0.0f /*rotation*/);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: LeaveNotify: Exception occured at visibleChangedSendMouseEvent(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: LeaveNotify: Exception occurred at visibleChangedSendMouseEvent(..)");
                 }
                 break;
             case MappingNotify:
@@ -732,12 +732,12 @@
             case KeyPress:
                 (*env)->CallVoidMethod(env, jw->jwindow, sendKeyEventID, (jshort) EVENT_KEY_PRESSED, 
                                       modifiers, javaVKeyUS, javaVKeyNN, (jchar) keyChar, keyString);
-                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: KeyPress: Exception occured at sendKeyEvent(..)");
+                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: KeyPress: Exception occurred at sendKeyEvent(..)");
                 break;
             case KeyRelease:
                 (*env)->CallVoidMethod(env, jw->jwindow, sendKeyEventID, (jshort) EVENT_KEY_RELEASED, 
                                       modifiers, javaVKeyUS, javaVKeyNN, (jchar) keyChar, keyString);
-                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: KeyRelease: Exception occured at sendKeyEvent(..)");
+                NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: KeyRelease: Exception occurred at sendKeyEvent(..)");
                 break;
             case DestroyNotify:
                 DBG_PRINT( "X11: event . DestroyNotify call %p, parent %p, child-event: %d\n", 
@@ -792,7 +792,7 @@
                                             (jint)left, (jint)right, (jint)top, (jint)bottom,
                                             (jint)visibleChange,
                                             JNI_FALSE);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ConfigureNotify: Exception occured at sizePosMaxInsetsVisibleChanged(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ConfigureNotify: Exception occurred at sizePosMaxInsetsVisibleChanged(..)");
                 }
                 break;
             case ClientMessage:
@@ -816,7 +816,7 @@
                     uint32_t netWMState = NewtWindows_getNET_WM_STATE(dpy, jw);
                     int visibleChange = NewtWindows_updateVisibility(env, dpy, jw, netWMState, "FocusIn");
                     (*env)->CallVoidMethod(env, jw->jwindow, focusVisibleChangedID, JNI_FALSE, (jint)1, (jint)visibleChange);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: FocusIn: Exception occured at focusVisibleChanged(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: FocusIn: Exception occurred at focusVisibleChanged(..)");
                 }
                 break;
 
@@ -826,7 +826,7 @@
                     uint32_t netWMState = NewtWindows_getNET_WM_STATE(dpy, jw);
                     int visibleChange = NewtWindows_updateVisibility(env, dpy, jw, netWMState, "FocusOut");
                     (*env)->CallVoidMethod(env, jw->jwindow, focusVisibleChangedID, JNI_FALSE, (jint)0, (jint)visibleChange);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: FocusOut: Exception occured at focusVisibleChanged(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: FocusOut: Exception occurred at focusVisibleChanged(..)");
                 }
                 break;
 
@@ -838,7 +838,7 @@
                     int visibleChange = NewtWindows_updateVisibility(env, dpy, jw, netWMState, "VisibilityNotify");
                     if( 0 <= visibleChange ) {
                         (*env)->CallVoidMethod(env, jw->jwindow, visibleChangedID, 0 < visibleChange ? JNI_TRUE : JNI_FALSE);
-                        NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: VisibilityNotify: Exception occured at visibleChanged(..)");
+                        NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: VisibilityNotify: Exception occurred at visibleChanged(..)");
                     }
                     #endif
                 }
@@ -851,7 +851,7 @@
                 if (evt.xexpose.count == 0 && evt.xexpose.width > 0 && evt.xexpose.height > 0) {
                     (*env)->CallVoidMethod(env, jw->jwindow, windowRepaintID, JNI_FALSE,
                         evt.xexpose.x, evt.xexpose.y, evt.xexpose.width, evt.xexpose.height);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: Expose: Exception occured at windowRepaint(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: Expose: Exception occurred at windowRepaint(..)");
                     #if 0
                     uint32_t netWMState = NewtWindows_getNET_WM_STATE(dpy, jw);
                     int visibleChange = NewtWindows_updateVisibility(env, dpy, jw, netWMState, "Expose");
@@ -872,10 +872,10 @@
                     int left=-1, right=-1, top=-1, bottom=-1;
                     if( NewtWindows_updateInsets(dpy, jw, False /* wait */, &left, &right, &top, &bottom) ) {
                         (*env)->CallVoidMethod(env, jw->jwindow, insetsVisibleChangedID, JNI_FALSE, left, right, top, bottom, 1);
-                        NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: MapNotify: Exception occured at insetsVisibleChanged(..)");
+                        NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: MapNotify: Exception occurred at insetsVisibleChanged(..)");
                     } else {
                         (*env)->CallVoidMethod(env, jw->jwindow, visibleChangedID, JNI_TRUE);
-                        NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: MapNotify: Exception occured at visibleChanged(..)");
+                        NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: MapNotify: Exception occurred at visibleChanged(..)");
                     }
                 }
                 break;
@@ -888,7 +888,7 @@
                     // ignore child window notification
                     jw->isMapped = False;
                     (*env)->CallVoidMethod(env, jw->jwindow, visibleChangedID, JNI_FALSE);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: UnmapNotify: Exception occured at visibleChanged(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: UnmapNotify: Exception occurred at visibleChanged(..)");
                 }
                 break;
 
@@ -922,7 +922,7 @@
                             (void*)evt.xreparent.window, (void*)winRoot, (void*)winTopParent);
                     #endif
                     (*env)->CallVoidMethod(env, jw->jwindow, reparentNotifyID, (jlong)evt.xreparent.parent);
-                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ReparentNotify: Exception occured at reparentNotify(..)");
+                    NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Display.DispatchMessages0: ReparentNotify: Exception occurred at reparentNotify(..)");
                 }
                 break;
 
--- a/src/newt/native/X11Window.c
+++ b/src/newt/native/X11Window.c
@@ -955,10 +955,10 @@
         XSync(dpy, False);
         if( NewtWindows_updateInsets(dpy, javaWindow, True /* wait */, &left, &right, &top, &bottom) ) {
             (*env)->CallVoidMethod(env, javaWindow->jwindow, insetsVisibleChangedID, JNI_FALSE, left, right, top, bottom, 1);
-            NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Window.CreateWindow: Exception occured at insetsVisibleChanged(..)");
+            NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Window.CreateWindow: Exception occurred at insetsVisibleChanged(..)");
         } else {
             (*env)->CallVoidMethod(env, javaWindow->jwindow, visibleChangedID, JNI_TRUE);
-            NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Window.CreateWindow: Exception occured at visibleChanged(..)");
+            NewtCommon_ExceptionCheck1_throwNewRuntimeException(env, "X11Window.CreateWindow: Exception occurred at visibleChanged(..)");
             left=0; right=0; top=0; bottom=0;
         }
 
--- a/src/test-native/bug1398/Bug1398Launcher.c
+++ b/src/test-native/bug1398/Bug1398Launcher.c
@@ -111,7 +111,7 @@
 destroy:
 	if ((*env)->ExceptionOccurred(env)) {
 		// handle exception
-        TRACE("Exception occured...%s", "");
+        TRACE("Exception occurred...%s", "");
 	}
 
 	if (err)
--- a/src/test/com/jogamp/opengl/test/junit/jogl/awt/TestGLJPanelTextureStateAWT.java
+++ b/src/test/com/jogamp/opengl/test/junit/jogl/awt/TestGLJPanelTextureStateAWT.java
@@ -287,7 +287,7 @@
             throwable.printStackTrace();
             Assume.assumeNoException( throwable );
         }
-        Assume.assumeFalse("Error occured in GLEL .. see log file above", glelError[0]);
+        Assume.assumeFalse("Error occurred in GLEL .. see log file above", glelError[0]);
     }
 
     @Test
--- a/src/test/com/jogamp/opengl/test/junit/newt/TestBug1211IRQ00NEWT.java
+++ b/src/test/com/jogamp/opengl/test/junit/newt/TestBug1211IRQ00NEWT.java
@@ -197,9 +197,9 @@
             interrupt2 = true;
         }
         Assert.assertEquals("interruptCounter not zero", 0, t.getInterruptCounter(false));
-        Assert.assertFalse("interrupt() occured!", t.isInterrupted());
-        Assert.assertFalse("Interrupt-1 occured!", interrupt1);
-        Assert.assertFalse("Interrupt-2 occured!", interrupt2);
+        Assert.assertFalse("interrupt() occurred!", t.isInterrupted());
+        Assert.assertFalse("Interrupt-1 occurred!", interrupt1);
+        Assert.assertFalse("Interrupt-2 occurred!", interrupt2);
     }
 
     /**
@@ -238,9 +238,9 @@
             interrupt2 = true;
         }
         Assert.assertEquals("interruptCounter not zero", 0, t.getInterruptCounter(false));
-        Assert.assertFalse("interrupt() occured!", t.isInterrupted());
-        Assert.assertFalse("Interrupt-1 occured!", interrupt1);
-        Assert.assertFalse("Interrupt-2 occured!", interrupt2);
+        Assert.assertFalse("interrupt() occurred!", t.isInterrupted());
+        Assert.assertFalse("Interrupt-1 occurred!", interrupt1);
+        Assert.assertFalse("Interrupt-2 occurred!", interrupt2);
     }
 
     @Test
@@ -287,8 +287,8 @@
             ExceptionUtils.dumpThrowable("InterruptedException-All", e);
             interrupted = true;
         }
-        Assert.assertFalse("Thread Interrupt-All occured!", interrupted);
-        Assert.assertFalse("Interrupt-Init0 occured!", interruptInit0);
+        Assert.assertFalse("Thread Interrupt-All occurred!", interrupted);
+        Assert.assertFalse("Interrupt-Init0 occurred!", interruptInit0);
     }
 
     static int atoi(final String a) {
